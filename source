class List {
private:
	typedef struct node {
		string data;
		node* next;

	}* nodePtr;
	nodePtr head;
	nodePtr curr;
	nodePtr temp;

public:
	List() :head(NULL), curr(NULL), temp(NULL)
	{
	}
	void addElement(string element)
	{
		nodePtr n = new node;
		n->next = NULL;
		n->data = element;

		if (head != NULL)
		{
			curr = head;
			while (curr->next != NULL)
			{
				curr = curr->next;
			}
			curr->next = n;
		}
		else
		{
			head = n;
		}
	}

	void deleteElement(string element)
	{
		nodePtr delPtr = NULL;
		temp = head;
		curr = head;
		while (curr != NULL && curr->data != element)
		{
			temp = curr;
			curr = curr->next;
		}
		delPtr = curr;
		curr = curr->next;
		temp->next = curr;
		if (delPtr == head)
		{
			head = head->next;
			temp = NULL;
		}
		delete delPtr;
	}

	void printList()
	{
		curr = head;
		while (curr != NULL)
		{
			cout << curr->data << endl;
			curr = curr->next;
		}
	}
};
